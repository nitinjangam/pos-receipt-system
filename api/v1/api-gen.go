// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Product defines model for Product.
type Product struct {
	// CgstRate Central GST rate (%)
	CgstRate    *float32 `json:"cgstRate,omitempty"`
	Description *string  `json:"description,omitempty"`
	Id          *int     `json:"id,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float32 `json:"price,omitempty"`

	// SgstRate State GST rate (%)
	SgstRate *float32 `json:"sgstRate,omitempty"`
}

// Sale defines model for Sale.
type Sale struct {
	Id    *int `json:"id,omitempty"`
	Items *[]struct {
		CgstAmount *float32 `json:"cgstAmount,omitempty"`

		// CgstRate Central GST rate (%)
		CgstRate   *float32   `json:"cgstRate,omitempty"`
		CgstTotal  *float32   `json:"cgstTotal,omitempty"`
		CreatedAt  *time.Time `json:"createdAt,omitempty"`
		GrandTotal *float32   `json:"grandTotal,omitempty"`
		LineTotal  *float32   `json:"lineTotal,omitempty"`
		ProductId  *int       `json:"productId,omitempty"`
		Quantity   *int       `json:"quantity,omitempty"`
		SgstAmount *float32   `json:"sgstAmount,omitempty"`

		// SgstRate State GST rate (%)
		SgstRate  *float32 `json:"sgstRate,omitempty"`
		SgstTotal *float32 `json:"sgstTotal,omitempty"`
		Subtotal  *float32 `json:"subtotal,omitempty"`
		TaxTotal  *float32 `json:"taxTotal,omitempty"`
		UnitPrice *float32 `json:"unitPrice,omitempty"`
	} `json:"items,omitempty"`
}

// Settings defines model for Settings.
type Settings struct {
	Address        *string  `json:"address,omitempty"`
	BusinessName   *string  `json:"businessName,omitempty"`
	DefaultTaxRate *float32 `json:"defaultTaxRate,omitempty"`
	Email          *string  `json:"email,omitempty"`
	Phone          *string  `json:"phone,omitempty"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PostAuthRegisterJSONBody defines parameters for PostAuthRegister.
type PostAuthRegisterJSONBody struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Name Search products by name (partial match allowed)
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostSalesJSONBody defines parameters for PostSales.
type PostSalesJSONBody struct {
	Items *[]struct {
		ProductId *int `json:"productId,omitempty"`
		Quantity  *int `json:"quantity,omitempty"`
	} `json:"items,omitempty"`
}

// PutSalesIdJSONBody defines parameters for PutSalesId.
type PutSalesIdJSONBody struct {
	Items *[]struct {
		ProductId *int `json:"productId,omitempty"`
		Quantity  *int `json:"quantity,omitempty"`
	} `json:"items,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody PostAuthRegisterJSONBody

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody = Product

// PutProductsIdJSONRequestBody defines body for PutProductsId for application/json ContentType.
type PutProductsIdJSONRequestBody = Product

// PostSalesJSONRequestBody defines body for PostSales for application/json ContentType.
type PostSalesJSONRequestBody PostSalesJSONBody

// PutSalesIdJSONRequestBody defines body for PutSalesId for application/json ContentType.
type PutSalesIdJSONRequestBody PutSalesIdJSONBody

// PutSettingsJSONRequestBody defines body for PutSettings for application/json ContentType.
type PutSettingsJSONRequestBody = Settings

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate and return JWT token
	// (POST /auth/login)
	PostAuthLogin(c *gin.Context)
	// Register the business owner account
	// (POST /auth/register)
	PostAuthRegister(c *gin.Context)
	// List all products
	// (GET /products)
	GetProducts(c *gin.Context, params GetProductsParams)
	// Add a new product
	// (POST /products)
	PostProducts(c *gin.Context)
	// Delete a product
	// (DELETE /products/{id})
	DeleteProductsId(c *gin.Context, id int)
	// Update a product
	// (PUT /products/{id})
	PutProductsId(c *gin.Context, id int)
	// List all sales
	// (GET /sales)
	GetSales(c *gin.Context)
	// Create a new sale
	// (POST /sales)
	PostSales(c *gin.Context)
	// Delete a sale
	// (DELETE /sales/{id})
	DeleteSalesId(c *gin.Context, id int)
	// Update a sale
	// (PUT /sales/{id})
	PutSalesId(c *gin.Context, id int)
	// Generate and download PDF receipt
	// (GET /sales/{id}/receipt)
	GetSalesIdReceipt(c *gin.Context, id int)
	// Get business information
	// (GET /settings)
	GetSettings(c *gin.Context)
	// Update business information
	// (PUT /settings)
	PutSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogin(c)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRegister(c)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c, params)
}

// PostProducts operation middleware
func (siw *ServerInterfaceWrapper) PostProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProducts(c)
}

// DeleteProductsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductsId(c, id)
}

// PutProductsId operation middleware
func (siw *ServerInterfaceWrapper) PutProductsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutProductsId(c, id)
}

// GetSales operation middleware
func (siw *ServerInterfaceWrapper) GetSales(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSales(c)
}

// PostSales operation middleware
func (siw *ServerInterfaceWrapper) PostSales(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSales(c)
}

// DeleteSalesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSalesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSalesId(c, id)
}

// PutSalesId operation middleware
func (siw *ServerInterfaceWrapper) PutSalesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSalesId(c, id)
}

// GetSalesIdReceipt operation middleware
func (siw *ServerInterfaceWrapper) GetSalesIdReceipt(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSalesIdReceipt(c, id)
}

// GetSettings operation middleware
func (siw *ServerInterfaceWrapper) GetSettings(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSettings(c)
}

// PutSettings operation middleware
func (siw *ServerInterfaceWrapper) PutSettings(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(options.BaseURL+"/products", wrapper.GetProducts)
	router.POST(options.BaseURL+"/products", wrapper.PostProducts)
	router.DELETE(options.BaseURL+"/products/:id", wrapper.DeleteProductsId)
	router.PUT(options.BaseURL+"/products/:id", wrapper.PutProductsId)
	router.GET(options.BaseURL+"/sales", wrapper.GetSales)
	router.POST(options.BaseURL+"/sales", wrapper.PostSales)
	router.DELETE(options.BaseURL+"/sales/:id", wrapper.DeleteSalesId)
	router.PUT(options.BaseURL+"/sales/:id", wrapper.PutSalesId)
	router.GET(options.BaseURL+"/sales/:id/receipt", wrapper.GetSalesIdReceipt)
	router.GET(options.BaseURL+"/settings", wrapper.GetSettings)
	router.PUT(options.BaseURL+"/settings", wrapper.PutSettings)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW8bNxP+KwTft0AKqJbS9BDo5iRI4CBohchBDoEPo+VIYsolN+QwjmDovxckl/ra",
	"XWvlr6DoyfJyOJx5nvkib3hhyspo1OT4+Ia7YoklxJ8Ta4QvKPysrKnQksS4UCwcfQTC8FugK6ysSBrN",
	"x/w1arKg2LvpJbNAyJ798isf8LmxJRAf87kyQHzAaVUhH3Ptyxlavh7sq7nJ646s1IuwLsXOZ6kJF2mf",
	"hhJbN1RWFnHl+Nmu050pBR9OdGa9+WJmX7GgcMQUFDZx7HJKEpZJIP9o4n9eGq+pn4OPwFdQeWkIVE8L",
	"LAKhON83WADhbyRL3G7ZEriwoMUJRyip8QTxKgX3RQcF3zxokrRqX3UnEvDAEZYUnuCs8zPqL03w4wTd",
	"Xkua9E22ttyoP4C1sOrIHiSSetGSCSCERedaK8DMO6nRuT+7SoTAOXhFl/Ajc3PcWyxBqvaCszS67Zym",
	"Q4EQLLyVtJqGaptcmSFYtOeeltv/3mZ73n++5INUm4OmtLq1b0lU8XVQLPXcNKPsfHLB5sYyYK4EpViG",
	"hk3+mjK3coQlu5a0ZAQ/WAGq8ArCVgZasMmbt8xigbIitkCNNi6dhdMlhbLGg5aPtcQ0aTufXPAB/47W",
	"JQuen43OngeYTIUaKsnH/MXZ6OwFH/AKaBkRGIKn5VCZhYw9oDIuplfgOx4ZcpVPjKMA0ocoNuAWv3l0",
	"9MqImKuF0YQpLaGqlCzizuFXl/pK6m7NOKrAuWtjRSuz3qHt6DMt5K6TTdKi4GOyHuMHVxnt0lm/j0b3",
	"sJTM36h7W3IQBp6WqCkchYI5XxTo3NwrlfLO+bIEuzoQjDFgkbzV7P3nS5YMCFUiJOSXKMuvwv7En8WF",
	"dIT2OIUfs+S/k8Xn97C0ROdggXfk8ZNDyzLOtzOZMWa0xG3am2uNlkFRxBbWymXdH6O1C2xh8R3SJMuE",
	"JLZQIqENehpNDsEWS5ZVstmKBSbYswosSVCsBCqWDJQy1yhCBwwVgH/zaFc8z3jpz2AH0kPkru6ZaJtp",
	"6/8W53zM/zfcjsbDei4e5qG42bgaNH2QjpiZb/w+oCYuh2pcbWHMRGyQvQqdpTOLdgi4awb18rV3OuwD",
	"UO9n9fR3WGSEYMA0XmcA2v3fDcbhjRTrdI7C1LL3QXkTv+fdF6IZmTGyQsvZBpYU/NC9ljDbjH8tcfZH",
	"t+/J0kPfk50Mbnd9wCvfxrynp/DwJ8fTqBtTX4mWePoUvx7DNISTA4W3FrZpFHiKchIvhifUkmT67ggZ",
	"Od8dHr9cBf5a6oyrvcqoJC9vrzBbJB6iQR+72N7jUnaXm8XDd/njVDepDd9ziayn8HD7OpHl11FBXVAD",
	"0y1Eb2K/Zx2N+35mEY3Q1BW0Zcrpi82m2nbg0l1nHx2B/2hWjZ4mq/YaRd9o2fSRXlk0rK/GR9vJhaiv",
	"yE+UTrdBXIn5PsKbh4+Z1BCH7sPhugHwzrPAafi+S28I6WIpzLVWBvZeGbow33kF6kQ6yzxmxOUzWkB5",
	"lW9Ybit0EjS0vaRJnVgJmncQyYpvLVu7MDz8HLePwB0GuazgXgnaH6ik3X5vv51+MAUoJvA7KlOVqIkl",
	"WT7g3qr6dW08HKogtzSOxi9HL0c82FSfddP9ziKNZqhFZaSO17Q6vaNj60HXgFuChgUGW7ZbNjNsc1vM",
	"kvqdJmbQzkkpg5p7XrWgxwqj53LhbcYy69jwfbX+JwAA//+HBe1hMBoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
